{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"About Me","text":"<p>\ud83d\udc4b Hello, I'm Rajadurai M., a seasoned Senior DevOps Engineer with over 5 years of professional experience, including 4+ years focused on DevOps.</p> <p>My career journey has been a thrilling adventure, characterized by continuous learning and innovation. I have honed my skills in automating, optimizing, and streamlining development and deployment pipelines, ensuring that software projects run smoothly from conception to delivery.</p> <p>I love \ud83d\udcdd taking notes and doing \ud83d\udee0\ufe0f hands-on work, which fuels my passion for experimenting with new technologies and methodologies. This drive often leads me to embark on exciting Proof of Concept (POC) projects, where I explore innovative solutions to real-world challenges.</p> <p>In my spare time, I enthusiastically explore new DevOps tools and software, constantly expanding my knowledge base. I'm also an active contributor to tech forums, where I engage in discussions, share insights, and help fellow tech enthusiasts. This engagement not only keeps me up-to-date with the latest industry trends but also allows me to give back to the tech community.</p> <p>My passion for DevOps extends beyond the workplace. Whether it's orchestrating containerized applications, implementing CI/CD pipelines, or managing infrastructure as code, I'm committed to driving efficiency and excellence in every project I undertake.</p> <p>I believe that curiosity is the key to growth, and I'm excited to continue my journey in the ever-evolving world of DevOps.</p> <p>Let's connect on LinkedIn and collaborate to bring innovation and efficiency to your projects! \ud83d\ude80</p>"},{"location":"Kubernetes/argocd-webhook/","title":"Argo CD Git Webhook Configuration","text":"<p>By default, Argo CD polls the Git repositories every 3 minutes to detect the changes made on the repo. If you want to remove the delay, you can configure a webhook event to send a notification to the API server.</p>"},{"location":"Kubernetes/argocd-webhook/#create-a-webhook-in-github","title":"Create a Webhook in GitHub","text":"<p>Login to your Github repository and navigate to settings &gt; webhooks and click <code>add webhook</code></p> <p>The payload URL is your ArgoCD Server + /api/webhook</p> <p>For example.</p> <p><code>https://argocd.example.com/api/webhook</code></p> <p>If you wish to use a shared secret, input a value in the secret, remember this as we will create a secret in the argocd installation below.</p> <p>Content type needs to be set to <code>application/json</code></p> <p>Note: If ArgoCD is publicly accessible, then configuring a webhook secret is highly recommended.</p>"},{"location":"Kubernetes/argocd-webhook/#create-a-webhook-secret-in-argocd","title":"Create a Webhook Secret in ArgoCD","text":"<p>Edit the Argo CD kubernetes secret Run from shell prompt<pre><code>kubectl edit secret argocd-secret -n argocd\n</code></pre> TIP: for ease of entering secrets, kubernetes supports inputting secrets in the stringData field, which saves you the trouble of base64 encoding the values and copying it to the data field. Simply copy the shared webhook secret created in step 1, to the stringData field Edit secrets and apply<pre><code>apiVersion: v1\nkind: Secret\nmetadata:\n  name: argocd-secret\n  namespace: argocd\ntype: Opaque\ndata:\n...\n\nstringData:\n  webhook.github.secret: SecretCreatedInGithub\n</code></pre></p>"},{"location":"Kubernetes/ha-kubernetes-cluster-with-rke2/","title":"HA Kubernetes with RKE2 &amp; Kube-VIP","text":"<p>kube-vip provides Kubernetes clusters with a virtual IP and load balancer for both the control plane (for building a highly-available cluster) and Kubernetes Services of type LoadBalancer without relying on any external hardware or software.</p>"},{"location":"Kubernetes/ha-kubernetes-cluster-with-rke2/#prerequsites","title":"Prerequsites","text":"<p>System Requirements</p> <p>Three (3) linux virtual machines with statically configured IPs. It is recommended that the virtual machines have an A Record pointing to the IP address of the host.  </p> <p>A floating IP Address for the Virtual IP to access the cluster. It is recommended that to have an A Record pointing to the floating IP Address.</p>"},{"location":"Kubernetes/ha-kubernetes-cluster-with-rke2/#configure-the-first-master-node","title":"Configure the first master node","text":"Become root<pre><code>sudo -i\n</code></pre>"},{"location":"Kubernetes/ha-kubernetes-cluster-with-rke2/#update-package-repository-and-upgrade-packages","title":"Update Package Repository and Upgrade Packages","text":"<p>Run from shell prompt<pre><code>apt-get update &amp;&amp; sudo apt upgrade -y\n</code></pre> Run from shell prompt<pre><code>apt-get -y install gnupg2 ca-certificates \\\ncurl apt-transport-https iptables\n</code></pre></p>"},{"location":"Kubernetes/ha-kubernetes-cluster-with-rke2/#install-kubectl-optional-if-already-installed","title":"Install kubectl (optional if already installed)","text":"<p>Additional Information - https://kubernetes.io/docs/tasks/tools/install-kubectl-linux/ Run from shell prompt<pre><code>apt update\napt install ca-certificates curl apt-transport-https -y\ncurl -fsSLo /usr/share/keyrings/kubernetes-archive-keyring.gpg https://packages.cloud.google.com/apt/doc/apt-key.gpg\necho \"deb [signed-by=/usr/share/keyrings/kubernetes-archive-keyring.gpg] https://apt.kubernetes.io/ kubernetes-xenial main\" | sudo tee /etc/apt/sources.list.d/kubernetes.list\napt update\napt install kubectl -y\n</code></pre></p>"},{"location":"Kubernetes/ha-kubernetes-cluster-with-rke2/#prepare-configuration-file-for-k8s-master01","title":"Prepare configuration file for k8s-master01","text":"<p>Run from shell prompt<pre><code>mkdir -p /etc/rancher/rke2\n</code></pre> Run from shell prompt<pre><code>vi /etc/rancher/rke2/config.yaml\n</code></pre> Paste the below contents<pre><code>tls-san:\n- k8s-master01\n- k8s-master01.dev.dman.cloud\n- k8s-cluster.dev.dman.cloud\n- 192.168.1.20\ndisable: rke2-ingress-nginx\ncni:\n- calico\n</code></pre></p>"},{"location":"Kubernetes/ha-kubernetes-cluster-with-rke2/#install-rke2-on-k8s-master01-node","title":"Install RKE2 on k8s-master01 node","text":"<p>Export variables we will use to configure kube-vip<pre><code>export VIP=192.168.1.20\nexport TAG=v0.5.11\nexport INTERFACE=ens192\nexport CONTAINER_RUNTIME_ENDPOINT=unix:///run/k3s/containerd/containerd.sock\nexport CONTAINERD_ADDRESS=/run/k3s/containerd/containerd.sock\nexport PATH=/var/lib/rancher/rke2/bin:$PATH\nexport KUBECONFIG=/etc/rancher/rke2/rke2.yaml\n</code></pre> Let's create an alias to save us some time<pre><code>alias k=kubectl \n</code></pre></p> <p>Install RKE2 on master node 1<pre><code>curl -sfL https://get.rke2.io | sh -\n</code></pre> <pre><code>systemctl enable rke2-server\n</code></pre> <pre><code>systemctl start rke2-server\n</code></pre></p>"},{"location":"Kubernetes/ha-kubernetes-cluster-with-rke2/#copy-token-and-save","title":"Copy Token and Save","text":"Run from shell prompt<pre><code>cat /var/lib/rancher/rke2/server/token\n</code></pre>"},{"location":"Kubernetes/ha-kubernetes-cluster-with-rke2/#install-kube-vip-on-k8s-master01-node","title":"Install kube-vip on k8s-master01 node","text":"<p>Configure roles for kube-vip<pre><code>curl -s https://kube-vip.io/manifests/rbac.yaml &gt; /var/lib/rancher/rke2/server/manifests/kube-vip-rbac.yaml\n</code></pre> Pull latest kube-vip<pre><code>crictl pull docker.io/plndr/kube-vip:$TAG\n</code></pre> Create an alias for kube-vip to save time<pre><code>alias kube-vip=\"ctr --namespace k8s.io run --rm --net-host docker.io/plndr/kube-vip:$TAG vip /kube-vip\"\n</code></pre> Create a daemonset manifest to run kube-vip<pre><code>kube-vip manifest daemonset \\\n--arp \\\n--interface $INTERFACE \\\n--address $VIP \\\n--controlplane \\\n--leaderElection \\\n--taint \\\n--services \\\n--inCluster | tee /var/lib/rancher/rke2/server/manifests/kube-vip.yaml\n</code></pre></p>"},{"location":"Kubernetes/ha-kubernetes-cluster-with-rke2/#check-to-see-if-kube-vip-pod-is-running","title":"Check to see if kube-vip pod is running","text":"<p>Find the running kube-vip pods<pre><code>kubectl get pod -n kube-system | grep kube-vip\n</code></pre> Find the node elected as leader<pre><code>kubectl logs --tail 100 -n kube-system &lt;pod_from_above&gt; | grep -i leader\n</code></pre></p>"},{"location":"Kubernetes/ha-kubernetes-cluster-with-rke2/#verify-the-floating-ip-status","title":"Verify the floating IP Status","text":"Run from shell prompt<pre><code>ping 192.168.1.20\n</code></pre>"},{"location":"Kubernetes/ha-kubernetes-cluster-with-rke2/#prepare-configuration-file-for-k8s-master02-node","title":"Prepare configuration file for k8s-master02 node","text":""},{"location":"Kubernetes/ha-kubernetes-cluster-with-rke2/#login-into-the-second-master-node","title":"Login into the second master node","text":"<p>Become root<pre><code>sudo -i\n</code></pre> Run from shell prompt<pre><code>mkdir -p /etc/rancher/rke2\n</code></pre> Run from shell prompt<pre><code>vi /etc/rancher/rke2/config.yaml\n</code></pre> Paste the below values remember to use the token copied above<pre><code>token: &lt;PASTE TOKEN HERE&gt;\nserver: https://k8s-cluster.dev.dman.cloud:9345\ntls-san:\n- k8s-master02\n- k8s-master02.dev.dman.cloud\n- k8s-cluster.dev.dman.cloud\n- 192.168.1.20\ndisable: rke2-ingress-nginx\ncni:\n- calico\n</code></pre></p> <p>Download RKE2<pre><code>curl -sfL https://get.rke2.io | sh -\n</code></pre> Enable RKE2<pre><code>systemctl enable rke2-server\n</code></pre> Start RKE2<pre><code>systemctl start rke2-server\n</code></pre></p>"},{"location":"Kubernetes/ha-kubernetes-cluster-with-rke2/#prepare-configuration-file-for-k8s-master03-node","title":"Prepare configuration file for k8s-master03 node","text":""},{"location":"Kubernetes/ha-kubernetes-cluster-with-rke2/#login-into-the-third-master-node","title":"Login into the third master node","text":"Become root<pre><code>sudo -i\n</code></pre> <p>Run from shell prompt<pre><code>mkdir -p /etc/rancher/rke2\n</code></pre> Run from shell prompt<pre><code>vi /etc/rancher/rke2/config.yaml\n</code></pre> Paste the below values remember to use the token copied above<pre><code>token: &lt;PASTE TOKEN HERE&gt;\nserver: https://k8s-cluster.dev.dman.cloud:9345\ntls-san:\n- k8s-master03\n- k8s-master03.dev.dman.cloud\n- k8s-cluster.dev.dman.cloud\n- 192.168.1.20\ndisable: rke2-ingress-nginx\ncni:\n- calico\n</code></pre></p> <p>Download RKE2<pre><code>curl -sfL https://get.rke2.io | sh -\n</code></pre> Enable RKE2<pre><code>systemctl enable rke2-server\n</code></pre> Start RKE2<pre><code>systemctl start rke2-server\n</code></pre></p>"},{"location":"Kubernetes/ha-kubernetes-cluster-with-rke2/#check-that-kube-vip-is-running-on-all-nodes","title":"Check that kube-vip is running on all nodes","text":"<p>Go back to master node 1 where we installed kubectl Run from shell prompt<pre><code>kubectl get pod -n kube-system | grep kube-vip\n</code></pre></p>"},{"location":"Kubernetes/ha-kubernetes-cluster-with-rke2/#finally-copy-and-edit-the-kubeconfig-to-talk-to-vip","title":"Finally copy and edit the kubeconfig to talk to VIP","text":"<p>Run from shell prompt<pre><code>cp /etc/rancher/rke2/rke2.yaml .\n</code></pre> Run from shell prompt<pre><code>vi rke2.yaml\n</code></pre> Edit Server Address: https://127.0.0.1:6443 and replace with VIP Run from shell prompt<pre><code>kubectl --kubeconfig ./rke2.yaml get nodes\n</code></pre></p> <p>You should now be able to test kube-vip is load balancing by shutting down one of the nodes and watching.</p>"},{"location":"Kubernetes/howto-use-kubernetes-secrets/","title":"How to use Kubernetes Secrets","text":""},{"location":"Kubernetes/howto-use-kubernetes-secrets/#create-kubernetes-secrets-using-kubectl-and-from-literal","title":"Create Kubernetes secrets using kubectl and --from-literal","text":"<p>The easiest ways to create the Kubernetes secret is by using the kubectl command and --from-literal flag. For example to understand Kubernetes secret creation we need three things.</p> <ul> <li>secret-name - test-secret</li> <li>username - test-user</li> <li>password - testP@ssword</li> </ul> Run from shell prompt<pre><code>kubectl create secret generic test-secret --from-literal=username=test-user --from-literal=password=testP@ssword\n</code></pre>"},{"location":"Kubernetes/howto-use-kubernetes-secrets/#verify-the-secret-using-the-following-command","title":"Verify the secret using the following command","text":"Run from shell prompt<pre><code>kubectl get secret test-secret\n</code></pre>"},{"location":"Kubernetes/howto-use-kubernetes-secrets/#describe-the-secret","title":"Describe The Secret","text":"Run from shell prompt<pre><code>kubectl describe secret test-secret\n</code></pre>"},{"location":"Kubernetes/howto-use-kubernetes-secrets/#base64-encoded-kubernetes-secrets","title":"Base64 Encoded Kubernetes Secrets","text":"Run from shell prompt<pre><code>echo -n \u2018test-user\u2019 | base64\n</code></pre>"},{"location":"Kubernetes/howto-use-kubernetes-secrets/#using-kubernetes-secrets-in-a-deployment-mysql","title":"Using Kubernetes Secrets In A Deployment (mysql)","text":""},{"location":"Kubernetes/howto-use-kubernetes-secrets/#create-a-secret","title":"Create a secret","text":"Create Secret<pre><code>apiVersion: v1\nkind: Secret\nmetadata:\n  name: mysql-test-secret\ntype: kubernetes.io/basic-auth\nstringData:\n  password: test1234\n</code></pre>"},{"location":"Kubernetes/howto-use-kubernetes-secrets/#create-a-deployment","title":"Create a deployment","text":"Create Deployment<pre><code>apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: mysql\nspec:\n  selector:\n    matchLabels:\n      app: mysql\n  strategy:\n    type: Recreate\n  template:\n    metadata:\n      labels:\n        app: mysql\n    spec:\n      containers:\n        - image: mysql\n          name: mysql\n          env:\n            - name: MYSQL_ROOT_PASSWORD\n              valueFrom:\n                secretKeyRef:\n                  name: mysql-test-secret\n                  key: password\n          ports:\n            - containerPort: 3306\n              name: mysql\n</code></pre>"},{"location":"Kubernetes/install-argocd/","title":"ArgoCD Installation","text":"<p>Argo CD is a declarative continuous delivery tool for Kubernetes applications. It uses the GitOps style to create and manage Kubernetes clusters. When any changes are made to the application configuration in Git, Argo CD will compare it with the configurations of the running application and notify users to bring the desired and live state into sync.</p>"},{"location":"Kubernetes/install-argocd/#prerequsites","title":"Prerequsites","text":"<ul> <li>Virtual Machine running Ubuntu 22.04 or newer</li> </ul>"},{"location":"Kubernetes/install-argocd/#update-package-repository-and-upgrade-packages","title":"Update Package Repository and Upgrade Packages","text":"Run from shell prompt<pre><code>sudo apt update\nsudo apt upgrade\n</code></pre>"},{"location":"Kubernetes/install-argocd/#create-kubernetes-cluster","title":"Create Kubernetes Cluster","text":"Run from shell prompt<pre><code>sudo bash\ncurl -sfL https://get.k3s.io | INSTALL_K3S_EXEC=\"server\" sh -s - --disable traefik\nexit \nmkdir .kube\nsudo cp /etc/rancher/k3s/k3s.yaml ./config\nsudo chown dmistry:dmistry config\nchmod 400 config\nexport KUBECONFIG=~/.kube/config\n</code></pre>"},{"location":"Kubernetes/install-argocd/#install-argocd","title":"Install ArgoCD","text":"Run from shell prompt<pre><code>kubectl create namespace argocd\nkubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml\n</code></pre>"},{"location":"Kubernetes/install-argocd/#change-service-to-nodeport","title":"Change Service to NodePort","text":"<p>Edit the service can change the service type from <code>ClusterIP</code> to <code>NodePort</code> Run from shell prompt<pre><code>kubectl patch svc argocd-server -n argocd -p '{\"spec\": {\"type\": \"NodePort\"}}' \n</code></pre></p>"},{"location":"Kubernetes/install-argocd/#fetch-password","title":"Fetch Password","text":"Run from shell prompt<pre><code>kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath=\"{.data.password}\" | base64 -d\n</code></pre>"},{"location":"Kubernetes/install-argocd/#optional-enable-tls-wingress","title":"Optional (Enable TLS w/Ingress)","text":"<p>If you want to enable access from the internet or private network you can follow the instructions below to install and configure an ingress-controller with lets-encrypt. Install Cert-Manager<pre><code>helm repo add jetstack https://charts.jetstack.io\nhelm repo update\nhelm install \\\n  cert-manager jetstack/cert-manager \\\n  --namespace cert-manager \\\n  --create-namespace \\\n  --version v1.11.0 \\\n  --set installCRDs=true\n</code></pre> Create Cluster Issuser for Lets Encrypt <code>vi letsencrypt-product.yaml</code> and paste the below contents adjust your email address Create a cluster issuer manifest<pre><code>apiVersion: cert-manager.io/v1\nkind: ClusterIssuer\nmetadata:\n  name: letsencrypt-prod\nspec:\n  acme:\n    server: https://acme-v02.api.letsencrypt.org/directory\n    email: dinesh@dman.cloud\n    privateKeySecretRef:\n      name: letsencrypt-prod\n    solvers:\n      - http01:\n          ingress:\n            class: nginx\n</code></pre> Apply manifest<pre><code>kubectl apply -f letsencrypt-product.yaml\n</code></pre> Deploy nginx-ingress controller Apply manifest<pre><code>kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.7.0/deploy/static/provider/cloud/deploy.yaml\n</code></pre> Create ingress for ArgoCD <code>vi ingress.yaml</code> and paste the below contents adjust the domain name Apply manifest<pre><code>apiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: argocd-server-ingress\n  namespace: argocd\n  annotations:\n    cert-manager.io/cluster-issuer: letsencrypt-prod\n    kubernetes.io/ingress.class: nginx\n    kubernetes.io/tls-acme: \"true\"\n    nginx.ingress.kubernetes.io/ssl-passthrough: \"true\"\n    # If you encounter a redirect loop or are getting a 307 response code\n    # then you need to force the nginx ingress to connect to the backend using HTTPS.\n    #\n    nginx.ingress.kubernetes.io/backend-protocol: \"HTTPS\"\nspec:\n  rules:\n  - host: argocd.dev.dman.cloud\n    http:\n      paths:\n      - path: /\n        pathType: Prefix\n        backend:\n          service:\n            name: argocd-server\n            port:\n              name: https\n  tls:\n  - hosts:\n    - argocd.dev.dman.cloud\n    secretName: argocd-secret # do not change, this is provided by Argo CD\n</code></pre> Apply manifest<pre><code>kubectl apply -f ingress.yaml\n</code></pre></p>"},{"location":"Kubernetes/install-argocd/#install-argocd-command-line-tool","title":"Install ArgoCD command line tool","text":"<p>Download With Curl Run from shell<pre><code>curl -sSL -o argocd-linux-amd64 https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64\nsudo install -m 555 argocd-linux-amd64 /usr/local/bin/argocd\nrm argocd-linux-amd64\n</code></pre></p>"},{"location":"Kubernetes/install-argocd/#login-to-argocd-from-the-cli-and-change-the-password","title":"Login to ArgoCD from the CLI and change the password","text":"<p>Remember to swap your domain name below<pre><code>argocd login argocd.dev.dman.cloud\n</code></pre> Update password<pre><code>argocd account update-password\n</code></pre></p>"},{"location":"Kubernetes/install-argocd/#deploy-demo-application","title":"Deploy Demo Application","text":"<p>You can use the below repository to deploy a demo nginx application This repository has a sample application<pre><code>https://github.com/dmancloud/argocd-tutorial\n</code></pre></p>"},{"location":"Kubernetes/install-argocd/#scale-replicaset","title":"Scale Replicaset","text":"Run from shell prompt<pre><code>kubectl scale --replicas=3 deployment nginx -n default\n</code></pre>"},{"location":"Kubernetes/install-argocd/#clean-up","title":"Clean Up","text":"Run from shell prompt<pre><code>kubectl delete -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml\nkubectl delete namespace argocd\n</code></pre>"},{"location":"Kubernetes/install-gitlab-ce-k8s/","title":"Install Gitlab CE on Kubernetes","text":"<p>Are you looking to streamline your CI/CD pipeline and improve collaboration across your development teams? Deploying GitLab on Kubernetes can help you achieve these goals and more. In this step-by-step tutorial, I will walk you through everything you need to know to get started with GitLab on Kubernetes.</p>"},{"location":"Kubernetes/install-gitlab-ce-k8s/#prerequisites","title":"Prerequisites","text":"<p>To complete this tutorial, you must have the following:</p> <ul> <li>Virtual Machine running Ubuntu Linux</li> <li>Domain, and ability to modify DNS records.</li> </ul>"},{"location":"Kubernetes/install-gitlab-ce-k8s/#dns","title":"DNS","text":"<p>You will need to make sure that the below DNS entries are made prior to attempting to install Gitblab CE. These DNS entries will be used to create TLS Certificates for your installation.</p> <ul> <li>gitlab.dev.dman.cloud</li> <li>minio.dev.dman.cloud</li> <li>registry.dev.dman.cloud</li> <li>kas.dev.dman.cloud</li> </ul>"},{"location":"Kubernetes/install-gitlab-ce-k8s/#create-kubernetes-cluster","title":"Create Kubernetes Cluster","text":"Run from shell prompt<pre><code>sudo bash\ncurl -sfL https://get.k3s.io | INSTALL_K3S_EXEC=\"server\" sh -s - --disable traefik\nexit \nmkdir .kube\nsudo cp /etc/rancher/k3s/k3s.yaml ./config\nsudo chown dmistry:dmistry config\nchmod 400 config\nexport KUBECONFIG=~/.kube/config\n</code></pre>"},{"location":"Kubernetes/install-gitlab-ce-k8s/#install-metallb-loadbalancer-optional-step","title":"Install MetalLB (LoadBalancer) - Optional Step","text":"<p>Run from shell prompt<pre><code>kubectl apply -f https://raw.githubusercontent.com/metallb/metallb/v0.13.9/config/manifests/metallb-native.yaml\n</code></pre> Next we need to configure MetalLB Run from shell prompt<pre><code>vim IPAddressPool.yaml\n</code></pre></p> <p>Copy and Paste the below remembering to change you network range below<pre><code>apiVersion: metallb.io/v1beta1\nkind: IPAddressPool\nmetadata:\n  name: first-pool\n  namespace: metallb-system\nspec:\n  addresses:\n  - 192.168.1.18/32\n</code></pre> Run from shell prompt<pre><code>vim L2Advertisement.yaml\n</code></pre> Copy and Paste the below<pre><code>apiVersion: metallb.io/v1beta1\nkind: L2Advertisement\nmetadata:\n  name: gitlab-ce\n  namespace: metallb-system\n</code></pre> Apply the configuration<pre><code>kubectl apply -f IPAddressPool.yaml\nkubectl apply -f L2Advertisement.yaml\n</code></pre></p>"},{"location":"Kubernetes/install-gitlab-ce-k8s/#install-helm","title":"Install Helm","text":"Run from shell prompt<pre><code>curl https://baltocdn.com/helm/signing.asc | gpg --dearmor | sudo tee /usr/share/keyrings/helm.gpg &gt; /dev/null\nsudo apt-get install apt-transport-https --yes\necho \"deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/helm.gpg] https://baltocdn.com/helm/stable/debian/ all main\" | sudo tee /etc/apt/sources.list.d/helm-stable-debian.list\nsudo apt-get update\nsudo apt-get install helm\n</code></pre>"},{"location":"Kubernetes/install-gitlab-ce-k8s/#install-gitlab-ce","title":"Install Gitlab CE","text":""},{"location":"Kubernetes/install-gitlab-ce-k8s/#add-the-gitlab-helm-repository","title":"Add the GitLab Helm repository","text":"<p>Run from shell prompt<pre><code>helm repo add gitlab https://charts.gitlab.io/\nhelm repo update\n</code></pre> Install the gitlab chart<pre><code>helm install gitlab gitlab/gitlab \\\n  --timeout 600s \\\n  --set global.hosts.domain=dev.dman.cloud \\\n  --set certmanager-issuer.email=dinesh@dman.cloud \\\n  --set global.edition=ce \\\n  --set postgresql.image.tag=13.6.0\n</code></pre></p>"},{"location":"Kubernetes/install-gitlab-ce-k8s/#fetch-initial-password","title":"Fetch Initial Password","text":"Run from shell prompt<pre><code>kubectl get secret gitlab-gitlab-initial-root-password -ojsonpath='{.data.password}' | base64 --decode ; echo\n</code></pre>"},{"location":"Kubernetes/install-jenkins/","title":"Jenkins Installation","text":"<p>Prerequsites</p> <p>Virtual Machine running Ubuntu 22.04 or newer</p>"},{"location":"Kubernetes/install-jenkins/#update-package-repository-and-upgrade-packages","title":"Update Package Repository and Upgrade Packages","text":"Become root<pre><code>sudo -i\n</code></pre> Run from shell prompt<pre><code>sudo apt update\nsudo apt upgrade\n</code></pre>"},{"location":"Kubernetes/install-jenkins/#adoptium-java-17","title":"Adoptium Java 17","text":""},{"location":"Kubernetes/install-jenkins/#add-adoptium-repository","title":"Add Adoptium repository","text":"Add adoptium repository<pre><code>wget -O - https://packages.adoptium.net/artifactory/api/gpg/key/public | tee /etc/apt/keyrings/adoptium.asc\necho \"deb [signed-by=/etc/apt/keyrings/adoptium.asc] https://packages.adoptium.net/artifactory/deb $(awk -F= '/^VERSION_CODENAME/{print$2}' /etc/os-release) main\" | tee /etc/apt/sources.list.d/adoptium.list\n</code></pre>"},{"location":"Kubernetes/install-jenkins/#install-java-17","title":"Install Java 17","text":"Update repository and install Java<pre><code>apt update\napt install temurin-17-jdk\n/usr/bin/java --version\nexit \n</code></pre>"},{"location":"Kubernetes/install-jenkins/#install-jenkins","title":"Install Jenkins","text":"<p>First, add the repository key to the system: Run from shell prompt<pre><code>curl -fsSL https://pkg.jenkins.io/debian-stable/jenkins.io-2023.key | sudo tee \\\n  /usr/share/keyrings/jenkins-keyring.asc &gt; /dev/null\necho deb [signed-by=/usr/share/keyrings/jenkins-keyring.asc] \\\n  https://pkg.jenkins.io/debian-stable binary/ | sudo tee \\\n  /etc/apt/sources.list.d/jenkins.list &gt; /dev/null\nsudo apt-get update\nsudo apt-get install jenkins\n</code></pre></p>"},{"location":"Kubernetes/install-jenkins/#starting-jenkins","title":"Starting Jenkins","text":"<p>Let\u2019s start Jenkins by using systemctl: Run from shell prompt<pre><code>sudo systemctl start jenkins\n</code></pre> Since systemctl doesn\u2019t display status output, we\u2019ll use the status command to verify that Jenkins started successfully: Run from shell prompt<pre><code>sudo systemctl status jenkins\n</code></pre> If everything went well, the beginning of the status output shows that the service is active and configured to start at boot: Run from shell prompt<pre><code>Output\n\u25cf jenkins.service - LSB: Start Jenkins at boot time\n   Loaded: loaded (/etc/init.d/jenkins; generated)\n   Active: active (exited) since Fri 2020-06-05 21:21:46 UTC; 45s ago\n     Docs: man:systemd-sysv-generator(8)\n    Tasks: 0 (limit: 1137)\n   CGroup: /system.slice/jenkins.service\n</code></pre></p>"},{"location":"Kubernetes/install-jenkins/#access-jenkins-user-interface","title":"Access Jenkins User Interface","text":"<p>To set up your installation, visit Jenkins on its default port, 8080, using your server domain name or IP address: http://your_server_ip_or_domain:8080</p>"},{"location":"Kubernetes/install-jenkins/#example-pipeline","title":"Example Pipeline","text":"<p>You should receive the Unlock Jenkins screen, which displays the location of the initial password: Sample Jenkinsfile<pre><code>pipeline {\n    agent any\n    stages {\n        stage('Hello World') {\n            steps {\n                echo 'Hello World'\n            }\n        }\n    }\n}\n</code></pre></p>"},{"location":"Kubernetes/install-nginx/","title":"Install Nginx Reverse Proxy for Jenkins","text":"<p>Nginx is one of the most popular web servers in the world and is responsible for hosting some of the largest and highest-traffic sites on the internet. It is a lightweight choice that can be used as either a web server or reverse proxy.</p> <p>In this tutorial, you will configure Nginx as a reverse proxy to direct client requests to Jenkins.</p> <p>Prerequsites</p> <p>Jenkins server already installed and running</p>"},{"location":"Kubernetes/install-nginx/#update-package-repository-and-upgrade-packages","title":"Update Package Repository and Upgrade Packages","text":"Run from shell prompt<pre><code>sudo apt update\nsudo apt upgrade\n</code></pre>"},{"location":"Kubernetes/install-nginx/#installing-nginx","title":"Installing Nginx","text":"Run from shell prompt<pre><code>sudo apt install nginx\n</code></pre>"},{"location":"Kubernetes/install-nginx/#checking-your-web-server","title":"Checking your Web Server","text":"<p>We can check with the <code>systemd</code> init system to make sure the service is running by typing: Run from shell prompt<pre><code>systemctl status nginx\n</code></pre> We can check with the systemd init system to make sure the service is running by typing: Output should look similar to the below<pre><code>Output\n\u25cf nginx.service - A high performance web server and a reverse proxy server\n   Loaded: loaded (/lib/systemd/system/nginx.service; enabled; vendor preset: enabled)\n   Active: active (running) since Fri 2020-04-20 16:08:19 UTC; 3 days ago\n     Docs: man:nginx(8)\n Main PID: 2369 (nginx)\n    Tasks: 2 (limit: 1153)\n   Memory: 3.5M\n   CGroup: /system.slice/nginx.service\n           \u251c\u25002369 nginx: master process /usr/sbin/nginx -g daemon on; master_process on;\n           \u2514\u25002380 nginx: worker process\n</code></pre></p> <p>Check you Web Server is running Access your web server by visiting<pre><code>http://your_server_ip\n</code></pre></p> <p>In order for Nginx to serve this content, it\u2019s necessary to create a server block with the correct directives. Run from shell prompt (replace your domain)<pre><code>sudo vi /etc/nginx/sites-available/jenkins.dev.dman.cloud\n</code></pre> Paste in the following configuration block, which is similar to the default, but updated for our new directory and domain name: Paste the below (replace your domain)<pre><code>upstream jenkins{\n    server 127.0.0.1:8080;\n}\n\nserver{\n    listen      80;\n    server_name jenkins.dev.dman.cloud;\n\n    access_log  /var/log/nginx/jenkins.access.log;\n    error_log   /var/log/nginx/jenkins.error.log;\n\n    proxy_buffers 16 64k;\n    proxy_buffer_size 128k;\n\n    location / {\n        proxy_pass  http://jenkins;\n        proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;\n        proxy_redirect off;\n\n        proxy_set_header    Host            $host;\n        proxy_set_header    X-Real-IP       $remote_addr;\n        proxy_set_header    X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header    X-Forwarded-Proto https;\n    }\n\n}\n</code></pre> Next, let\u2019s enable the file by creating a link from it to the sites-enabled directory, which Nginx reads from during startup: Run from shell prompt (replace your domain)<pre><code>sudo ln -s /etc/nginx/sites-available/jenkins.dev.dman.cloud /etc/nginx/sites-enabled/\n</code></pre> Next, test to make sure that there are no syntax errors in any of your Nginx files: Run from shell prompt<pre><code>sudo nginx -t\n</code></pre> If there aren\u2019t any problems, restart Nginx to enable your changes: Run from shell prompt<pre><code>sudo systemctl restart nginx\n</code></pre> Nginx should now be serving Jenkins from your domain name. You can test this by navigating to http://your_domain</p>"},{"location":"Kubernetes/install-sonarqube/","title":"How to Install Sonarqube in Ubuntu Linux","text":"<p>SonarQube is an open-source platform developed by SonarSource for continuous inspection of code quality to perform automatic reviews with static analysis of code to detect bugs and code smells on 29 programming languages.</p>"},{"location":"Kubernetes/install-sonarqube/#prerequsites","title":"Prerequsites","text":"<ul> <li>Virtual Machine running Ubuntu 22.04 or newer</li> </ul>"},{"location":"Kubernetes/install-sonarqube/#update-package-repository-and-upgrade-packages","title":"Update Package Repository and Upgrade Packages","text":"Run from shell prompt<pre><code>sudo apt update\nsudo apt upgrade\n</code></pre>"},{"location":"Kubernetes/install-sonarqube/#postgresql","title":"PostgreSQL","text":""},{"location":"Kubernetes/install-sonarqube/#add-postgressql-repository","title":"Add PostgresSQL repository","text":"Run from shell prompt<pre><code>sudo sh -c 'echo \"deb http://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main\" &gt; /etc/apt/sources.list.d/pgdg.list'\nwget -qO- https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo tee /etc/apt/trusted.gpg.d/pgdg.asc &amp;&gt;/dev/null\n</code></pre>"},{"location":"Kubernetes/install-sonarqube/#install-postgresql","title":"Install PostgreSQL","text":"Run from shell prompt<pre><code>sudo apt update\nsudo apt-get -y install postgresql postgresql-contrib\nsudo systemctl enable postgresql\n</code></pre>"},{"location":"Kubernetes/install-sonarqube/#create-database-for-sonarqube","title":"Create Database for Sonarqube","text":"<p>Set password for postgres user<pre><code>sudo passwd postgres\n</code></pre> Change to the postgres user<pre><code>su - postgres\n</code></pre> Create database user postgres<pre><code>createuser sonar\n</code></pre> Set password and grant privileges<pre><code>createuser sonar\npsql \nALTER USER sonar WITH ENCRYPTED password 'sonar';\nCREATE DATABASE sonarqube OWNER sonar;\ngrant all privileges on DATABASE sonarqube to sonar;\n\\q\nexit\n</code></pre></p>"},{"location":"Kubernetes/install-sonarqube/#adoptium-java-17","title":"Adoptium Java 17","text":"Switch to root user<pre><code>sudo bash\n</code></pre>"},{"location":"Kubernetes/install-sonarqube/#add-adoptium-repository","title":"Add Adoptium repository","text":"Add adoptium repository<pre><code>wget -O - https://packages.adoptium.net/artifactory/api/gpg/key/public | tee /etc/apt/keyrings/adoptium.asc\necho \"deb [signed-by=/etc/apt/keyrings/adoptium.asc] https://packages.adoptium.net/artifactory/deb $(awk -F= '/^VERSION_CODENAME/{print$2}' /etc/os-release) main\" | tee /etc/apt/sources.list.d/adoptium.list\n</code></pre>"},{"location":"Kubernetes/install-sonarqube/#install-java-17","title":"Install Java 17","text":"Update repository and install Java<pre><code>apt update\napt install temurin-17-jdk\nupdate-alternatives --config java\n/usr/bin/java --version\nexit \n</code></pre>"},{"location":"Kubernetes/install-sonarqube/#linux-kernel-tuning","title":"Linux Kernel Tuning","text":""},{"location":"Kubernetes/install-sonarqube/#increase-limits","title":"Increase Limits","text":"<p>Run from shell prompt<pre><code>sudo vim /etc/security/limits.conf\n</code></pre> Paste the below values at the bottom of the file Add these values<pre><code>sonarqube   -   nofile   65536\nsonarqube   -   nproc    4096\n</code></pre></p>"},{"location":"Kubernetes/install-sonarqube/#increase-mapped-memory-regions","title":"Increase Mapped Memory Regions","text":"<p>Run from shell prompt<pre><code>sudo vim /etc/sysctl.conf\n</code></pre> Paste the below values at the bottom of the file Add these values<pre><code>vm.max_map_count = 262144\n</code></pre></p>"},{"location":"Kubernetes/install-sonarqube/#reboot-system","title":"Reboot System","text":"Run from shell prompt<pre><code>sudo reboot\n</code></pre>"},{"location":"Kubernetes/install-sonarqube/#sonarqube","title":"Sonarqube","text":""},{"location":"Kubernetes/install-sonarqube/#download-and-extract","title":"Download and Extract","text":"Run from shell prompt<pre><code>sudo wget https://binaries.sonarsource.com/Distribution/sonarqube/sonarqube-9.9.0.65466.zip\nsudo apt install unzip\nsudo unzip sonarqube-9.9.0.65466.zip -d /opt\nsudo mv /opt/sonarqube-9.9.0.65466 /opt/sonarqube\n</code></pre>"},{"location":"Kubernetes/install-sonarqube/#create-user-and-set-permissions","title":"Create user and set permissions","text":"Run from shell prompt<pre><code>sudo groupadd sonar\nsudo useradd -c \"user to run SonarQube\" -d /opt/sonarqube -g sonar sonar\nsudo chown sonar:sonar /opt/sonarqube -R\n</code></pre>"},{"location":"Kubernetes/install-sonarqube/#update-sonarqube-properties-with-db-credentials","title":"Update Sonarqube properties with DB credentials","text":"<p>Run from shell prompt<pre><code>sudo vim /opt/sonarqube/conf/sonar.properties\n</code></pre> Find and replace the below values, you might need to add the sonar.jdbc.url Run from shell prompt<pre><code>sonar.jdbc.username=sonar\nsonar.jdbc.password=sonar\nsonar.jdbc.url=jdbc:postgresql://localhost:5432/sonarqube\n</code></pre> Create service for Sonarqube Run from shell prompt<pre><code>sudo vim /etc/systemd/system/sonar.service\n</code></pre> Paste the below into the file Paste the below contents<pre><code>[Unit]\nDescription=SonarQube service\nAfter=syslog.target network.target\n\n[Service]\nType=forking\n\nExecStart=/opt/sonarqube/bin/linux-x86-64/sonar.sh start\nExecStop=/opt/sonarqube/bin/linux-x86-64/sonar.sh stop\n\nUser=sonar\nGroup=sonar\nRestart=always\n\nLimitNOFILE=65536\nLimitNPROC=4096\n\n[Install]\nWantedBy=multi-user.target\n</code></pre> Start Sonarqube and Enable service Paste the below contents<pre><code>sudo systemctl start sonar\nsudo systemctl enable sonar\nsudo systemctl status sonar\n</code></pre> Watch log files and monitor for startup Watch logs<pre><code>sudo tail -f /opt/sonarqube/logs/sonar.log\n</code></pre> Access the Sonarqube UI Paste the below contents<pre><code>http://&lt;IP&gt;:9000\n</code></pre></p>"},{"location":"Kubernetes/install-sonarqube/#optional-reverse-proxy-and-tls-configuration","title":"Optional Reverse Proxy and TLS Configuration","text":""},{"location":"Kubernetes/install-sonarqube/#installing-nginx","title":"Installing Nginx","text":"Run from shell prompt<pre><code>sudo apt install nginx\n</code></pre> <p>create nginx config file<pre><code>vi /etc/nginx/sites-available/sonarqube.conf\n</code></pre> Paste the contents below and be sure to update the domain name</p> <p>Paste and update<pre><code>server {\n\n    listen 80;\n    server_name sonarqube.dev.dman.cloud;\n    access_log /var/log/nginx/sonar.access.log;\n    error_log /var/log/nginx/sonar.error.log;\n    proxy_buffers 16 64k;\n    proxy_buffer_size 128k;\n\n    location / {\n        proxy_pass http://127.0.0.1:9000;\n        proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;\n        proxy_redirect off;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto http;\n    }\n}\n</code></pre> Next, activate the server block configuration 'sonarqube.conf' by creating a symlink of that file to the '/etc/nginx/sites-enabled' directory. Then, verify your Nginx configuration files.</p> Enable virtual host and restart nginx<pre><code>sudo ln -s /etc/nginx/sites-available/sonarqube.conf /etc/nginx/sites-enabled/\nsudo nginx -t\nsudo systemctl restart nginx\n</code></pre>"},{"location":"Kubernetes/install-sonarqube/#installing-certbot","title":"Installing Certbot","text":"<p>The first step to using Let\u2019s Encrypt to obtain an SSL certificate is to install the Certbot software on your server. Run from shell prompt<pre><code>sudo apt install certbot python3-certbot-nginx\n</code></pre></p>"},{"location":"Kubernetes/install-sonarqube/#obtaining-an-ssl-certificate","title":"Obtaining an SSL Certificate","text":"<p>Certbot provides a variety of ways to obtain SSL certificates through plugins. The Nginx plugin will take care of reconfiguring Nginx and reloading the config whenever necessary. To use this plugin, type the following: Run from shell prompt (replace domain)<pre><code>sudo certbot --nginx -d sonarqube.dev.dman.cloud\n</code></pre> If that\u2019s successful, certbot will ask how you\u2019d like to configure your HTTPS settings.</p> <p>Select your choice then hit ENTER. The configuration will be updated, and Nginx will reload to pick up the new settings. certbot will wrap up with a message telling you the process was successful and where your certificates are stored</p> <p>Nginx should now be serving your domain name. You can test this by navigating to https://your_domain</p> <p>That's it! You have now successfully installed Sonarque, if you found this tutotial helpful please consider subscribing to my YouTube Channel for more tutorials like this. https://www.youtube.com/@dineshmistry</p>"},{"location":"Kubernetes/jenkins-in-kubernetes/","title":"Running Jenkins in Kubernetes (AWS)","text":"<p>Installing Jenkins CI in Kubernests and building containers with Kaniko</p>"},{"location":"Kubernetes/jenkins-in-kubernetes/#prerequsites","title":"Prerequsites","text":"<ul> <li>Virtual Machine running Ubuntu 22.04 or newer</li> </ul>"},{"location":"Kubernetes/jenkins-in-kubernetes/#update-package-repository-and-upgrade-packages","title":"Update Package Repository and Upgrade Packages","text":"Run from shell prompt<pre><code>sudo apt update\nsudo apt upgrade\n</code></pre>"},{"location":"Kubernetes/jenkins-in-kubernetes/#create-kubernetes-cluster","title":"Create Kubernetes Cluster","text":"Run from shell prompt<pre><code>sudo bash\ncurl -sfL https://get.k3s.io | INSTALL_K3S_EXEC=\"server\" sh -s - --disable traefik\nexit \nmkdir .kube\nsudo cp /etc/rancher/k3s/k3s.yaml ./config\nsudo chown dmistry:dmistry config\nchmod 400 config\nexport KUBECONFIG=~/.kube/config\n</code></pre>"},{"location":"Kubernetes/jenkins-in-kubernetes/#installs-jenkins","title":"Installs Jenkins","text":"<p>Install helm chart and update repo Run from shell prompt<pre><code>helm repo add jenkinsci https://charts.jenkins.io\nhelm repo update\n</code></pre></p>"},{"location":"Kubernetes/jenkins-in-kubernetes/#create-namespace","title":"Create Namespace","text":"Run from shell prompt<pre><code>kubectl create ns jenkins\n</code></pre>"},{"location":"Kubernetes/jenkins-in-kubernetes/#download-yaml-files","title":"Download YAML files","text":"Run from shell prompt<pre><code>wget https://raw.githubusercontent.com/dmancloud/jenkins-kubernetes-kaniko/main/jenkins-sa.yaml\nwget https://raw.githubusercontent.com/dmancloud/jenkins-kubernetes-kaniko/main/jenkins-volume.yaml\nwget https://raw.githubusercontent.com/dmancloud/jenkins-kubernetes-kaniko/main/values.yaml\n</code></pre>"},{"location":"Kubernetes/jenkins-in-kubernetes/#create-a-secret-for-dockerhub","title":"Create a secret for Dockerhub","text":"Run from shell prompt<pre><code>kubectl create secret docker-registry docker-credentials --docker-username=[userid] --docker-password=[Docker Hub access token] --docker-email=[user email address] --namespace jenkins\n</code></pre>"},{"location":"Kubernetes/jenkins-in-kubernetes/#finally-install-jenkins-ci","title":"Finally install Jenkins CI","text":"Run from shell prompt<pre><code>helm upgrade --install jenkins jenkinsci/jenkins -n jenkins --create-namespace -f values.yaml\n</code></pre>"},{"location":"Kubernetes/jenkins-ssh-agent/","title":"Adding an SSH Based Agent to Jenkins","text":""},{"location":"Kubernetes/jenkins-ssh-agent/#prerequsites","title":"Prerequsites","text":"<ul> <li>Virtual Machine running Ubuntu 22.04 or newer</li> </ul>"},{"location":"Kubernetes/jenkins-ssh-agent/#update-package-repository-and-upgrade-packages","title":"Update Package Repository and Upgrade Packages","text":"Run from shell prompt<pre><code>sudo apt update\nsudo apt upgrade\n</code></pre>"},{"location":"Kubernetes/jenkins-ssh-agent/#create-jenkins-user","title":"Create Jenkins User","text":"<p>Run from shell prompt<pre><code>sudo adduser jenkins\n</code></pre> Grant Sudo Rights to Jenkins User Run from shell prompt<pre><code>sudo usermod -aG sudo jenkins\n</code></pre> Logout and ssh back as user Jenkins</p>"},{"location":"Kubernetes/jenkins-ssh-agent/#adoptium-java-11","title":"Adoptium Java 11","text":"Switch to root user<pre><code>sudo bash\n</code></pre>"},{"location":"Kubernetes/jenkins-ssh-agent/#add-adoptium-repository","title":"Add Adoptium repository","text":"Add adoptium repository<pre><code>wget -O - https://packages.adoptium.net/artifactory/api/gpg/key/public | tee /etc/apt/keyrings/adoptium.asc\necho \"deb [signed-by=/etc/apt/keyrings/adoptium.asc] https://packages.adoptium.net/artifactory/deb $(awk -F= '/^VERSION_CODENAME/{print$2}' /etc/os-release) main\" | tee /etc/apt/sources.list.d/adoptium.list\n</code></pre>"},{"location":"Kubernetes/jenkins-ssh-agent/#install-java-11","title":"Install Java 11","text":"Update repository and install Java<pre><code>apt update\napt install temurin-11-jdk\nupdate-alternatives --config java\n/usr/bin/java --version\nexit \n</code></pre>"},{"location":"Kubernetes/jenkins-ssh-agent/#docker","title":"Docker","text":""},{"location":"Kubernetes/jenkins-ssh-agent/#install-using-the-repository","title":"Install using the repository","text":"<p>Update the apt package index and install packages to allow apt to use a repository over HTTPS: Run from shell prompt<pre><code>sudo apt-get update\n\nsudo apt-get install \\\n    ca-certificates \\\n    curl \\\n    gnupg \\\n    lsb-release\n</code></pre> Add Docker\u2019s official GPG key: Run from shell prompt<pre><code>sudo mkdir -m 0755 -p /etc/apt/keyrings\ncurl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg\n</code></pre> Use the following command to set up the repository: Run from shell prompt<pre><code>echo \\\n  \"deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \\\n  $(lsb_release -cs) stable\" | sudo tee /etc/apt/sources.list.d/docker.list &gt; /dev/null\n</code></pre> Install Docker Engine Run from shell prompt<pre><code>sudo apt-get update\nsudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin\n</code></pre></p>"},{"location":"Kubernetes/jenkins-ssh-agent/#manage-docker-as-a-non-root-user","title":"Manage Docker as a non-root user","text":"<p>Create the docker group. Run from shell prompt<pre><code>sudo groupadd docker\n</code></pre> Add your user to the docker group. Run from shell prompt<pre><code>sudo usermod -aG docker $USER\n</code></pre> Run the following command to activate the changes to groups: Run from shell prompt<pre><code>newgrp docker\n</code></pre> Verify that you can run docker commands without sudo. Run from shell prompt<pre><code>docker run hello-world\n</code></pre></p>"},{"location":"Kubernetes/jenkins-ssh-agent/#connect-to-remote-ssh-agent","title":"Connect to Remote SSH Agent","text":"<p>From the Jenkins UI (Controller) Run from shell prompt<pre><code>ssh jenkins@$AGENT_HOSTNAME\n</code></pre> Create private and public SSH keys. The following command creates the private key jenkinsAgent_rsa and the public key jenkinsAgent_rsa.pub. It is recommended to store your keys under ~/.ssh/ so we move to that directory before creating the key pair. Run from shell prompt<pre><code> mkdir ~/.ssh; cd ~/.ssh/ &amp;&amp; ssh-keygen -t rsa -m PEM -C \"Jenkins agent key\" -f \"jenkinsAgent_rsa\"\n</code></pre> Add the public SSH key to the list of authorized keys on the agent machine Run from shell prompt<pre><code>cat jenkinsAgent_rsa.pub &gt;&gt; ~/.ssh/authorized_keys\n</code></pre> Ensure that the permissions of the ~/.ssh directory is secure, as most ssh daemons will refuse to use keys that have file permissions that are considered insecure: Run from shell prompt<pre><code>chmod 700 ~/.ssh\n chmod 600 ~/.ssh/authorized_keys ~/.ssh/jenkinsAgent_rsa\n</code></pre> Copy the private SSH key (~/.ssh/jenkinsAgent_rsa) from the agent machine to your OS clipboard Run from shell prompt<pre><code>cat ~/.ssh/jenkinsAgent_rsa\n</code></pre></p> <p>Now you can add the Agent on the Jenkins UI (Controller)</p>"},{"location":"Kubernetes/jenkins-ssl/","title":"Configure Jenkins with SSL Using an Nginx Reverse Proxy","text":"<p>By default, Jenkins comes with its own built-in Winstone web server listening on port 8080, which is convenient for getting started. It\u2019s also a good idea, however, to secure Jenkins with SSL to protect passwords and sensitive data transmitted through the web interface.</p>"},{"location":"Kubernetes/jenkins-ssl/#prerequsites","title":"Prerequsites","text":"<ul> <li>Jenkins installed </li> <li>An A record with  pointing to your server\u2019s public IP address."},{"location":"Kubernetes/jenkins-ssl/#update-package-repository-and-upgrade-packages","title":"Update Package Repository and Upgrade Packages","text":"Run from shell prompt<pre><code>sudo apt update\nsudo apt upgrade\n</code></pre>"},{"location":"Kubernetes/jenkins-ssl/#installing-certbot","title":"Installing Certbot","text":"<p>The first step to using Let\u2019s Encrypt to obtain an SSL certificate is to install the Certbot software on your server. Run from shell prompt<pre><code>sudo apt install certbot python3-certbot-nginx\n</code></pre></p>"},{"location":"Kubernetes/jenkins-ssl/#confirming-nginxs-configuration","title":"Confirming Nginx\u2019s Configuration","text":"<p>Certbot needs to be able to find the correct server block in your Nginx configuration for it to be able to automatically configure SSL. Specifically, it does this by looking for a server_name directive that matches the domain you request a certificate for. Run from shell prompt (replace domain)<pre><code>sudo vi /etc/nginx/sites-available/jenkins.dev.dman.cloud\n</code></pre> Find the existing server_name line. It should look like this: Look for your domain<pre><code>...\nserver_name jenkins.dev.dman.cloud;\n...\n</code></pre> If it does, exit your editor and move on to the next step. If not review the installing Nginx Tutorial</p>"},{"location":"Kubernetes/jenkins-ssl/#obtaining-an-ssl-certificate","title":"Obtaining an SSL Certificate","text":"<p>Certbot provides a variety of ways to obtain SSL certificates through plugins. The Nginx plugin will take care of reconfiguring Nginx and reloading the config whenever necessary. To use this plugin, type the following: Run from shell prompt (replace domain)<pre><code>sudo certbot --nginx -d jenkins.dev.dman.cloud\n</code></pre> If that\u2019s successful, certbot will ask how you\u2019d like to configure your HTTPS settings.</p> <p>Select your choice then hit ENTER. The configuration will be updated, and Nginx will reload to pick up the new settings. certbot will wrap up with a message telling you the process was successful and where your certificates are stored:</p>"},{"location":"Kubernetes/jenkins-ssl/#verifying-certbot-auto-renewal","title":"Verifying Certbot Auto-Renewal","text":"<p>Let\u2019s Encrypt\u2019s certificates are only valid for ninety days. This is to encourage users to automate their certificate renewal process. The certbot package we installed takes care of this for us by adding a systemd timer that will run twice a day and automatically renew any certificate that\u2019s within thirty days of expiration.</p> <p>You can query the status of the timer with <code>systemctl</code>: Run from shell prompt<pre><code>sudo systemctl status certbot.timer\n</code></pre> Output should look like the below<pre><code>Output\n\u25cf certbot.timer - Run certbot twice daily\n     Loaded: loaded (/lib/systemd/system/certbot.timer; enabled; vendor preset: enabled)\n     Active: active (waiting) since Mon 2020-05-04 20:04:36 UTC; 2 weeks 1 days ago\n    Trigger: Thu 2020-05-21 05:22:32 UTC; 9h left\n   Triggers: \u25cf certbot.service\n</code></pre> To test the renewal process, you can do a dry run with <code>certbot</code>: Run from shell prompt<pre><code>sudo certbot renew --dry-run\n</code></pre> If you see no errors, you\u2019re all set. When necessary, Certbot will renew your certificates and reload Nginx to pick up the changes. If the automated renewal process ever fails, Let\u2019s Encrypt will send a message to the email you specified, warning you when your certificate is about to expire.</p> <p>Nginx should now be serving your domain name. You can test this by navigating to https://your_domain</p>"},{"location":"Kubernetes/k3sup-ha/","title":"Lightweight HA Kubernetes with k3s &amp; kube-vip","text":""},{"location":"Kubernetes/k3sup-ha/#perfect-kuberntes-cluster-for-homelabs","title":"Perfect kuberntes cluster for homelabs","text":"<ul> <li>k3s is lightweight kubernetes, easy to install, 50% memory, single binary of less than 100 MB.  </li> <li>kube-vip provides kubernetes clusters with a virtual IP for the control plane  </li> <li>k3sup is a light-weight utility to get from zero to KUBECONFIG with k3s on any local or remote VM</li> </ul>"},{"location":"Kubernetes/k3sup-ha/#prerequsites","title":"Prerequsites","text":"<p>System Requirements</p> <p>Five (5) linux virtual machines with statically configured IPs. It is recommended that the virtual machines have an A Record pointing to the IP address of the host.  </p> <p>A floating IP Address for the Virtual IP to access the cluster. It is recommended that to have an A Record pointing to the floating IP Address.</p> <p>You will also need a linux host that you will deploy the server and agent nodes from.</p>"},{"location":"Kubernetes/k3sup-ha/#install-k3sup","title":"Install k3sup","text":"<p>First you will need to install k3sup which is what we will use to deploy the server and agent nodes from.</p> <p>Install k3sup<pre><code>curl -sLS https://get.k3sup.dev | sh\nsudo install k3sup /usr/local/bin/\n\nk3sup --help\n</code></pre> k3sup uses ssh to connect to the server and agent nodes so we need to copy our public key.</p> <p>copy ssh key to server node 1<pre><code>ssh-copy-id dmistry@192.168.1.21\n</code></pre> copy ssh key to server node 2<pre><code>ssh-copy-id dmistry@192.168.1.22\n</code></pre> copy ssh key to server node 3<pre><code>ssh-copy-id dmistry@192.168.1.23\n</code></pre> copy ssh key to agent node 1<pre><code>ssh-copy-id dmistry@192.168.1.24\n</code></pre> copy ssh key to agent node 1<pre><code>ssh-copy-id dmistry@192.168.1.25\n</code></pre></p> <p>Next we deploy a k3s sever node to the first node</p> <p><pre><code>k3sup install --ip 192.168.1.21 \\\n--user dmistry \\\n--sudo \\\n--tls-san 192.168.1.20 \\\n --cluster --local-path ~/.kube/k8s-cluster.dev.dman.cloud.yaml \\\n --context k8s-cluster-ha \\\n --k3s-extra-args \"--disable traefik --disable servicelb --node-ip=192.168.1.21\"\n</code></pre> <pre><code>export KUBECONFIG=~/.kube/k8s-cluster.dev.dman.cloud.yaml\n</code></pre></p> <p><pre><code>kubectl apply -f https://kube-vip.io/manifests/rbac.yaml \n</code></pre> SSH in to the first server node and install kube-vip <pre><code>ssh 192.168.1.21\n</code></pre> <pre><code>sudo -i\n</code></pre> <pre><code>ctr image pull docker.io/plndr/kube-vip:latest\n</code></pre> <pre><code>alias kube-vip=\"ctr run --rm --net-host docker.io/plndr/kube-vip:latest vip /kube-vip\"\n</code></pre> <pre><code>kube-vip manifest daemonset \\\n--arp \\\n--interface ens192 \\\n--address 192.168.1.20 \\\n--controlplane \\\n--leaderElection \\\n--taint \\\n--inCluster | tee /var/lib/rancher/k3s/server/manifests/kube-vip.yaml\n</code></pre> Logout of first server node and join serves node 2 and server node 3</p> <p>Server Node 2<pre><code>k3sup join --ip 192.168.1.22 --user dmistry --sudo --k3s-channel stable --server --server-ip 192.168.1.20 --server-user dmistry --sudo --k3s-extra-args \"--disable traefik  --disable servicelb --node-ip=192.168.1.22\"\n</code></pre> Server Node 3<pre><code>k3sup join --ip 192.168.1.23 --user dmistry --sudo --k3s-channel stable --server --server-ip 192.168.1.20 --server-user dmistry --sudo --k3s-extra-args \"--disable traefik  --disable servicelb --node-ip=192.168.1.23\"\n</code></pre> Next we configure the agent nodes Agent Node 2<pre><code>k3sup join --user dmistry --sudo --server-ip 192.168.1.20 --ip 192.168.1.24 --k3s-channel stable -- --k3s-extra-args \"--disable traefik --disable servicelb\" --print-command\n</code></pre> Agent Node 2<pre><code>k3sup join --user dmistry --sudo --server-ip 192.168.1.20 --ip 192.168.1.25 --k3s-channel stable -- --k3s-extra-args \"--disable traefik --disable servicelb\" --print-command\n</code></pre></p> <p>You can now download the kubeconfig from server node 1 and update the IP adderss to match the load balancer IP (192.168.1.20)</p>"},{"location":"Kubernetes/kubernetes-certifcates-traefik/","title":"TLS Certifcates on Kubernetes with Traefik and Cloudflare","text":"<p>In this tutorial we will deploy Traefik as our ingress controller and use Cloudflare and Let's Encrypt to secure our applications running in our kubernetes clusters</p>"},{"location":"Kubernetes/kubernetes-certifcates-traefik/#prerequsites","title":"Prerequsites","text":"<ul> <li>Kubernetes Cluster</li> <li>Helm installed</li> </ul> <p>If you have not already done so make sure you have exported your kubeconig so you can access the cluster </p> export your kubeconfig<pre><code>export KUBECONFIG=/home/dmistry/.kube/k8s-cluster.dev.dman.cloud.yaml\n</code></pre>"},{"location":"Kubernetes/kubernetes-certifcates-traefik/#clone-repository","title":"Clone Repository","text":"export your kubeconfig<pre><code>git clone git@github.com:dmancloud/traefik-cert-manager.git\n</code></pre>"},{"location":"Kubernetes/kubernetes-certifcates-traefik/#install-traefik-ingress-controller","title":"Install Traefik Ingress Controller","text":"export your kubeconfig<pre><code>helm repo add traefik https://helm.traefik.io/traefik\n</code></pre> <p>Update and make any changes need to the values file. If yo want to fetch the complete values and make additional adjustments you can do so by running the following command export your kubeconfig<pre><code>helm show values traefik/traefik &gt; /tmp/values.yaml\n</code></pre> Install Traefik export your kubeconfig<pre><code>helm install --namespace=traefik traefik traefik/traefik --values=values.yaml\n</code></pre> Add default header values needed by most applications export your kubeconfig<pre><code>kubectl apply -f default-headers.yaml\n</code></pre></p>"},{"location":"Kubernetes/kubernetes-certifcates-traefik/#install-cert-manager","title":"Install Cert-Manager","text":"<p>export your kubeconfig<pre><code>helm repo add jetstack https://charts.jetstack.io\n</code></pre> export your kubeconfig<pre><code>helm upgrade --install \\\n  cert-manager jetstack/cert-manager \\\n  --namespace cert-manager \\\n  --create-namespace \\\n  --version v1.11.0 \\\n  --set installCRDs=true \\\n  --values=values.yaml \\\n  --create-namespace\n</code></pre></p> <p>Next we need to create an API token on CloudFlare so we can create a secret for Lets Encrypt to use. Edit the <code>secret-cf-token.yaml</code> and replace the <code>cloudflare-token:</code> with your token.</p> <p>When creating your token on Cloudflare you need to make sure you grant <code>edit</code> access to the token</p> export your kubeconfig<pre><code>kubectl apply -f secret-cf-token.yaml\n</code></pre> <p>Create ClusterIssuer you should start with a Staging Certificate before moving to Production certifcates to avoid any rate limiting in case you make a mistake.</p> <p>Edit the <code>letsencrypt-staging.yaml</code> and <code>letsencrypt-production.yaml</code> files and adjust to match your setup export your kubeconfig<pre><code>kubectl apply -f letsencrypt-staging.yaml\nkubectl apply -f letsencrypt-production.yaml\n</code></pre></p>"},{"location":"Kubernetes/kubernetes-certifcates-traefik/#create-certificate-for-you-service-nginx","title":"Create Certificate for you Service (nginx)","text":"<p>Next we will want to create a certificate for your service, you will need to make sure that you have created a DNS entry for your FQDN. export your kubeconfig<pre><code>kubectl apply -f nginx-dev.dman-cloud.yaml\n</code></pre></p>"},{"location":"Kubernetes/kubernetes-certifcates-traefik/#deploy-your-application-and-configure-ingressroute","title":"Deploy your application and configure IngressRoute","text":"<p>In this example we will deploy nginx and create a simple IngressRoute</p> export your kubeconfig<pre><code>kubectl apply -f deployment.yaml\nkubectl apply -f service.yaml\n</code></pre> <p>Next we will deploy an IngressRoute be sure to edit the <code>ingress.yaml</code> and make any adjustments like your domain name, tls certifcate etc</p> export your kubeconfig<pre><code>kubectl apply -f ingress.yaml\n</code></pre>"},{"location":"Kubernetes/nexus3-with-tls/","title":"Install Nexus3 Repository Manager with TLS","text":"<p>Manage components, binaries and build artifacts across your entire software supply chain.</p>"},{"location":"Kubernetes/nexus3-with-tls/#prerequsites","title":"Prerequsites","text":"<ul> <li>Virtual Machine running Ubuntu 22.04 or newer</li> </ul>"},{"location":"Kubernetes/nexus3-with-tls/#update-package-repository-and-upgrade-packages","title":"Update Package Repository and Upgrade Packages","text":"Run from shell prompt<pre><code>sudo apt update\nsudo apt upgrade\n</code></pre>"},{"location":"Kubernetes/nexus3-with-tls/#adoptium-temurin-java-8","title":"Adoptium Temurin Java 8","text":"Switch to root user<pre><code>sudo bash\n</code></pre>"},{"location":"Kubernetes/nexus3-with-tls/#add-adoptium-repository","title":"Add Adoptium repository","text":"Add adoptium repository<pre><code>wget -O - https://packages.adoptium.net/artifactory/api/gpg/key/public | tee /etc/apt/keyrings/adoptium.asc\necho \"deb [signed-by=/etc/apt/keyrings/adoptium.asc] https://packages.adoptium.net/artifactory/deb $(awk -F= '/^VERSION_CODENAME/{print$2}' /etc/os-release) main\" | tee /etc/apt/sources.list.d/adoptium.list\n</code></pre>"},{"location":"Kubernetes/nexus3-with-tls/#install-java-8","title":"Install Java 8","text":"<p>Update repository and install Java<pre><code>apt update\napt install temurin-8-jdk\n</code></pre> Check the Java Version is installed correctly<pre><code>/usr/bin/java -version\nexit \n</code></pre></p>"},{"location":"Kubernetes/nexus3-with-tls/#install-nexus3-repository-manager","title":"Install Nexus3 Repository Manager","text":"<p>At time of writing v3.49.0 is the latest version. You can check if there is a newer version available by visiting - https://help.sonatype.com/repomanager3/product-information/download</p>"},{"location":"Kubernetes/nexus3-with-tls/#download-nexus","title":"Download Nexus","text":"Run from shell prompt<pre><code>wget https://download.sonatype.com/nexus/3/nexus-3.49.0-02-unix.tar.gz\n</code></pre>"},{"location":"Kubernetes/nexus3-with-tls/#extract-nexus","title":"Extract Nexus","text":"<p>Run from shell prompt<pre><code>sudo tar -xzvf nexus-3.49.0-02-unix.tar.gz -C /opt\n</code></pre> Run from shell prompt<pre><code>cd /opt\n</code></pre> Run from shell prompt<pre><code>sudo mv nexus-3.49.0-02 nexus\n</code></pre></p>"},{"location":"Kubernetes/nexus3-with-tls/#create-user-to-run-nexus3","title":"Create User to run Nexus3","text":"Run from shell prompt<pre><code>sudo adduser nexus\n</code></pre>"},{"location":"Kubernetes/nexus3-with-tls/#update-and-grant-permissions-to-nexus-user","title":"Update and Grant Permissions to Nexus user","text":"Run from shell prompt<pre><code>sudo chown -R nexus:nexus /opt/nexus\nsudo chown -R nexus:nexus /opt/sonatype-work\n</code></pre>"},{"location":"Kubernetes/nexus3-with-tls/#change-default-run_as-user","title":"Change default run_as user","text":"<p>Run from shell prompt<pre><code>sudo vi /opt/nexus/bin/nexus.rc\n</code></pre> Uncomment <code>#run_as_user=</code> and modify to set nexus as user. It should read <code>run_as_user=\u201dnexus\u201d</code></p>"},{"location":"Kubernetes/nexus3-with-tls/#configure-nexus-to-run-as-a-service","title":"Configure Nexus to run as a service","text":"<p>Run from shell prompt<pre><code>sudo vi /etc/systemd/system/nexus.service\n</code></pre> Paste the below<pre><code>[Unit]\nDescription=nexus service\nAfter=network.target\n\n[Service]\nType=forking\nLimitNOFILE=65536\nUser=nexus\nGroup=nexus\nExecStart=/opt/nexus/bin/nexus start\nExecStop=/opt/nexus/bin/nexus stop\nUser=nexus\nRestart=on-abort\n[Install]\nWantedBy=multi-user.target\n</code></pre></p>"},{"location":"Kubernetes/nexus3-with-tls/#start-and-enable-nexus","title":"Start and Enable Nexus","text":"<p>Run from shell prompt<pre><code>sudo systemctl enable nexus\n</code></pre> Run from shell prompt<pre><code>sudo systemctl start nexus\n</code></pre> Run from shell prompt<pre><code>sudo systemctl status nexus\n</code></pre></p>"},{"location":"Kubernetes/nexus3-with-tls/#monitor-startup","title":"Monitor Startup","text":"<p>Run from shell prompt<pre><code>tail -f /opt/sonatype-work/nexus3/log/nexus.log\n</code></pre> Wait until you see Nexus3 has started, you should see something like below Run from shell prompt<pre><code>Started @50347ms\n2023-03-14 13:36:15,995+0000 INFO  [jetty-main-1]  *SYSTEM org.sonatype.nexus.bootstrap.jetty.JettyServer -\n-------------------------------------------------\n\nStarted Sonatype Nexus OSS 3.49.0-02\n\n-------------------------------------------------\n</code></pre></p>"},{"location":"Kubernetes/nexus3-with-tls/#access-user-interface","title":"Access User Interface","text":"<p>Once Nexus is successfully installed, you can access it in the browser by Run from shell prompt<pre><code>http://IP_Address:8081\n</code></pre></p> <p>You can obtain the initial password by issuing the following command: Run from shell prompt<pre><code>cat /opt/sonatype-work/nexus3/admin.password\n</code></pre> <pre><code>Configure Nexus Docker Hosted Registry from the User Interface\nIn the example below we are assuming a docker hosted registry\nwas created on port 1111\n</code></pre></p>"},{"location":"Kubernetes/nexus3-with-tls/#installing-nginx","title":"Installing Nginx","text":"Run from shell prompt<pre><code>sudo apt install nginx\n</code></pre>"},{"location":"Kubernetes/nexus3-with-tls/#checking-your-web-server","title":"Checking your Web Server","text":"<p>We can check with the <code>systemd</code> init system to make sure the service is running by typing: Run from shell prompt<pre><code>systemctl status nginx\n</code></pre> We can check with the systemd init system to make sure the service is running by typing: Output should look similar to the below<pre><code>Output\n\u25cf nginx.service - A high performance web server and a reverse proxy server\n   Loaded: loaded (/lib/systemd/system/nginx.service; enabled; vendor preset: enabled)\n   Active: active (running) since Fri 2020-04-20 16:08:19 UTC; 3 days ago\n     Docs: man:nginx(8)\n Main PID: 2369 (nginx)\n    Tasks: 2 (limit: 1153)\n   Memory: 3.5M\n   CGroup: /system.slice/nginx.service\n           \u251c\u25002369 nginx: master process /usr/sbin/nginx -g daemon on; master_process on;\n           \u2514\u25002380 nginx: worker process\n</code></pre></p> <p>Check you Web Server is running Access your web server by visiting<pre><code>http://your_server_ip\n</code></pre> In order for Nginx to serve this content, it\u2019s necessary to create a server block with the correct directives. Run from shell prompt (replace your domain)<pre><code>sudo vi /etc/nginx/sites-available/nexus-repo.dev.dman.cloud\n</code></pre> Paste in the following configuration block, which is similar to the default, but updated for our new directory and domain name: Paste the below (replace your domain)<pre><code>    server {\n        listen   *:80;\n        server_name  nexus-repo.dev.dman.cloud;\n\n        # allow large uploads of files - refer to nginx documentation\n        client_max_body_size 1G;\n\n        # optimize downloading files larger than 1G - refer to nginx doc before adjusting\n        #proxy_max_temp_file_size 2G;\n\n        location / {\n        proxy_pass http://127.0.0.1:8081;\n            proxy_set_header Host $host;\n            proxy_set_header X-Real-IP $remote_addr;\n            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        }\n\n    # Docker /v2 and /v1 (for search) requests\n    location /v2 {\n      proxy_set_header Host $host:$server_port;\n      proxy_set_header X-Real-IP $remote_addr;\n      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n      proxy_pass http://127.0.0.1:1111;\n    }\n    location /v1 {\n      proxy_set_header Host $host:$server_port;\n      proxy_set_header X-Real-IP $remote_addr;\n      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n      proxy_pass http://127.0.0.1:1111;\n    }\n    }\n</code></pre></p> <p>Next, let\u2019s enable the file by creating a link from it to the sites-enabled directory, which Nginx reads from during startup: Run from shell prompt (replace your domain)<pre><code>sudo ln -s /etc/nginx/sites-available/nexus-repo.dev.dman.cloud /etc/nginx/sites-enabled/\n</code></pre> Next, test to make sure that there are no syntax errors in any of your Nginx files: Run from shell prompt<pre><code>sudo nginx -t\n</code></pre> If there aren\u2019t any problems, restart Nginx to enable your changes: Run from shell prompt<pre><code>sudo systemctl restart nginx\n</code></pre> Nginx should now be serving Nexus from your domain name. You can test this by navigating to http://your_domain</p>"},{"location":"Kubernetes/nexus3-with-tls/#configure-nexus-with-ssl-using-an-nginx-reverse-proxy","title":"Configure Nexus with SSL Using an Nginx Reverse Proxy","text":"<p>By default, Jenkins comes with its own built-in Winstone web server listening on port 8080, which is convenient for getting started. It\u2019s also a good idea, however, to secure Jenkins with SSL to protect passwords and sensitive data transmitted through the web interface.</p>"},{"location":"Kubernetes/nexus3-with-tls/#installing-certbot","title":"Installing Certbot","text":"<p>The first step to using Let\u2019s Encrypt to obtain an SSL certificate is to install the Certbot software on your server. Run from shell prompt<pre><code>sudo apt install certbot python3-certbot-nginx\n</code></pre></p>"},{"location":"Kubernetes/nexus3-with-tls/#confirming-nginxs-configuration","title":"Confirming Nginx\u2019s Configuration","text":"<p>Certbot needs to be able to find the correct server block in your Nginx configuration for it to be able to automatically configure SSL. Specifically, it does this by looking for a server_name directive that matches the domain you request a certificate for. Run from shell prompt (replace domain)<pre><code>sudo vi /etc/nginx/sites-available/nexus-repo.dev.dman.cloud\n</code></pre> Find the existing server_name line. It should look like this: Look for your domain<pre><code>...\nserver_name nexus-repo.dev.dman.cloud;\n...\n</code></pre> If it does, exit your editor and move on to the next step. If not review the installing Nginx Tutorial</p>"},{"location":"Kubernetes/nexus3-with-tls/#obtaining-an-ssl-certificate","title":"Obtaining an SSL Certificate","text":"<p>Certbot provides a variety of ways to obtain SSL certificates through plugins. The Nginx plugin will take care of reconfiguring Nginx and reloading the config whenever necessary. To use this plugin, type the following: Run from shell prompt (replace domain)<pre><code>sudo certbot --nginx -d nexus-repo.dev.dman.cloud\n</code></pre> If that\u2019s successful, certbot will ask how you\u2019d like to configure your HTTPS settings.</p> <p>Select your choice then hit ENTER. The configuration will be updated, and Nginx will reload to pick up the new settings. certbot will wrap up with a message telling you the process was successful and where your certificates are stored:</p>"},{"location":"Kubernetes/nexus3-with-tls/#verifying-certbot-auto-renewal","title":"Verifying Certbot Auto-Renewal","text":"<p>Let\u2019s Encrypt\u2019s certificates are only valid for ninety days. This is to encourage users to automate their certificate renewal process. The certbot package we installed takes care of this for us by adding a systemd timer that will run twice a day and automatically renew any certificate that\u2019s within thirty days of expiration.</p> <p>You can query the status of the timer with <code>systemctl</code>: Run from shell prompt<pre><code>sudo systemctl status certbot.timer\n</code></pre> Output should look like the below<pre><code>Output\n\u25cf certbot.timer - Run certbot twice daily\n     Loaded: loaded (/lib/systemd/system/certbot.timer; enabled; vendor preset: enabled)\n     Active: active (waiting) since Mon 2020-05-04 20:04:36 UTC; 2 weeks 1 days ago\n    Trigger: Thu 2020-05-21 05:22:32 UTC; 9h left\n   Triggers: \u25cf certbot.service\n</code></pre> To test the renewal process, you can do a dry run with <code>certbot</code>: Run from shell prompt<pre><code>sudo certbot renew --dry-run\n</code></pre> If you see no errors, you\u2019re all set. When necessary, Certbot will renew your certificates and reload Nginx to pick up the changes. If the automated renewal process ever fails, Let\u2019s Encrypt will send a message to the email you specified, warning you when your certificate is about to expire.</p> <p>Nginx should now be serving your domain name. You can test this by navigating to https://your_domain</p>"},{"location":"Kubernetes/rancher-manager-with-lets-encrypt/","title":"Install Rancher Manager With Lets Encrypt","text":"<p>Rancher is a popular open-source platform for managing and deploying containerized applications on Kubernetes. By using cert-manager and Let's Encrypt, we will ensure that all communication with the Rancher server is secure and encrypted.</p>"},{"location":"Kubernetes/rancher-manager-with-lets-encrypt/#prerequsites","title":"Prerequsites","text":"<ul> <li>Domain Name</li> <li>Ability to make DNS Changes</li> <li>Ubuntu Virtual Machine</li> <li>Port 80 &amp; 443 must be accessible for Let's Encrypt to verify and issue certificates</li> </ul>"},{"location":"Kubernetes/rancher-manager-with-lets-encrypt/#configure-dns","title":"Configure DNS","text":"<p>Pick a subdomain and create a DNS entry pointing to the IP Address that will be assigned to the Rancher Server Run from shell prompt<pre><code>curl -4 icanhazip.com\n</code></pre> Head over to your DNS Provider and create an <code>A</code> record Run from shell prompt<pre><code>dig +short replace_with_subdomain\n</code></pre></p>"},{"location":"Kubernetes/rancher-manager-with-lets-encrypt/#update-package-repository-and-upgrade-packages","title":"Update Package Repository and Upgrade Packages","text":"Run from shell prompt<pre><code>sudo apt-get update &amp;&amp; sudo apt upgrade -y\n</code></pre>"},{"location":"Kubernetes/rancher-manager-with-lets-encrypt/#install-required-packages","title":"Install required packages","text":"Run from shell prompt<pre><code>sudo apt-get -y install gnupg2 ca-certificates curl apt-transport-https iptables\n</code></pre>"},{"location":"Kubernetes/rancher-manager-with-lets-encrypt/#install-helm-v3","title":"Install Helm v3","text":"<p>Additional Information - https://helm.sh/docs/intro/install/ Run from shell prompt<pre><code>curl https://baltocdn.com/helm/signing.asc | gpg --dearmor | sudo tee /usr/share/keyrings/helm.gpg &gt; /dev/null\nsudo apt-get install apt-transport-https --yes\necho \"deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/helm.gpg] https://baltocdn.com/helm/stable/debian/ all main\" | sudo tee /etc/apt/sources.list.d/helm-stable-debian.list\nsudo apt-get update\nsudo apt-get install helm\n</code></pre></p>"},{"location":"Kubernetes/rancher-manager-with-lets-encrypt/#install-kubectl","title":"Install kubectl","text":"<p>Additional Information - https://kubernetes.io/docs/tasks/tools/install-kubectl-linux/ Run from shell prompt<pre><code>sudo apt update\nsudo apt install ca-certificates curl apt-transport-https -y\nsudo curl -fsSLo /usr/share/keyrings/kubernetes-archive-keyring.gpg https://packages.cloud.google.com/apt/doc/apt-key.gpg\necho \"deb [signed-by=/usr/share/keyrings/kubernetes-archive-keyring.gpg] https://apt.kubernetes.io/ kubernetes-xenial main\" | sudo tee /etc/apt/sources.list.d/kubernetes.list\nsudo apt update\nsudo apt install kubectl -y\n</code></pre></p>"},{"location":"Kubernetes/rancher-manager-with-lets-encrypt/#install-rke2-cluster","title":"Install RKE2 Cluster","text":"<p>Additional Information - https://docs.rke2.io/ Run from shell prompt<pre><code>sudo bash\ncurl -sfL https://get.rke2.io | sh -\nexit\n</code></pre> Run from shell prompt<pre><code>sudo systemctl enable rke2-server.service\nsudo systemctl start rke2-server.service\nsudo journalctl -u rke2-server -f\nmkdir ~/.kube\nsudo cp /etc/rancher/rke2/rke2.yaml ~/.kube/config\nsudo chown $USER:$USER ~/.kube/config\nchmod 400 ~/.kube/config\nkubectl get pods -A\n</code></pre></p>"},{"location":"Kubernetes/rancher-manager-with-lets-encrypt/#install-cert-manager","title":"Install cert-manager","text":"<p>Additional Information - https://cert-manager.io/docs/installation/ Run from shell prompt<pre><code>helm repo add jetstack https://charts.jetstack.io\nhelm repo update\nhelm upgrade --install cert-manager jetstack/cert-manager  --namespace cert-manager --create-namespace --set installCRDs=true\n</code></pre></p>"},{"location":"Kubernetes/rancher-manager-with-lets-encrypt/#install-rancher","title":"Install Rancher","text":"<p>Additional Information - https://docs.ranchermanager.rancher.io/ Run from shell prompt<pre><code>kubectl create ns cattle-system\nhelm repo add rancher-latest https://releases.rancher.com/server-charts/latest\nhelm repo update\nhelm install rancher rancher-latest/rancher --namespace cattle-system --set hostname=HOSTNAME --set bootstrapPassword=PASSWORD --set ingress.tls.source=letsEncrypt --set letsEncrypt.email=EMAIL_ADDRESS --set letsEncrypt.ingress.class=nginx\nkubectl -n cattle-system rollout status deploy/rancher\nwatch kubectl get pods -A\n</code></pre></p>"},{"location":"Kubernetes/rancher-manager-with-lets-encrypt/#access-rancher-user-interface","title":"Access Rancher User Interface","text":"Open in browser<pre><code>https://RANCHER_URL\n</code></pre>"},{"location":"Kubernetes/truenas-core-tls/","title":"TrueNAS (Core) Configure TLS Certificate","text":"<p>The first step is to update your network setting. Make sure you have a static IP address and update the hostname and domain you will need to change it to a Fully Qualified Domain Name (FQDN).</p> <pre><code>truenas.dev.dman.cloud\n</code></pre>"},{"location":"Kubernetes/truenas-core-tls/#install-acmesh-shell-script-using-the-below-command","title":"Install acme.sh shell script using the below command","text":"<p>Open a shell to your TrueNAS server</p> <p><pre><code>curl https://get.acme.sh | sh -s email=xxxxxx@xxxxx.xxx\n</code></pre> Next you will need to use the ACME DNS API wiki to determine what the correct syntax for your Domain service provider</p> <pre><code>https://github.com/acmesh-official/acme.sh/wiki/dnsapi\n</code></pre> <p>The syntax below is for CloudFlare</p> <pre><code>export CF_Token=\"sdfsdfsdfljlbjkljlkjsdfoiwje\"\nexport CF_Account_ID=\"xxxxxxxxxxxxx\"\n</code></pre> <p>In order to use the new token, the token currently needs access read access to Zone.Zone, and write access to Zone.DNS, across all Zones. </p> <p>The next step is to request a certificate from Let\u2019s Encrypt</p> <pre><code>acme.sh --issue --dns dns_cf --keylength 4096 -d truenas.dev.dman.cloud\n</code></pre>"},{"location":"Kubernetes/truenas-core-tls/#create-truenas-api-token","title":"Create TrueNAS API Token","text":"<p>Next, you will need to generate a API Key on TrueNAS to deploy the certificate. You can obtain a API Key from your TrueNAS console</p>"},{"location":"Kubernetes/truenas-core-tls/#clone-the-below-repository","title":"Clone the below repository","text":"<p>This repository contains a python script which will help you install the TLS Certificate</p> <p><pre><code>git clone https://github.com/dmancloud/letsencrypt-truenas.git\n</code></pre> Once you\u2019ve downloaded the script, you\u2019ll need to create a configuration file called deploy_config. The git repo has an example (deploy_config.example) which you can copy and modify, or you can write your own from scratch. </p> <p>Insert your API key that you generated earlier</p> <pre><code>[deploy]\napi_key = CHANGE_ME\n</code></pre> <p>Next, you will install the certificate using the below command <pre><code>acme.sh --install-cert -d truenas.dev.dman.cloud --reloadcmd \"~/letsencrypt-truenas/deploy_freenas.py\"\n</code></pre></p> <ul> <li>note if you get an error make sure the python script has the executable permission <code>chmod a+x deploy_freenas.py</code></li> </ul> <p>You shoulf see the message \u201cCertificate import successfully.\u201d Your Web Service will restart.</p>"},{"location":"Kubernetes/truenas-core-tls/#redirect-http-https","title":"Redirect http-&gt;https","text":"<p>Log back into your console after the system restarted. Then, navigate to System Settings &gt; GUI &gt; Settings and enable Web Interface HTTP -&gt; HTTPS Redirect.</p> <pre><code>It is a good idea to restart your TrueNas server again at this point\n</code></pre> <p>Lastly, you need to create a Cron Job to renew the certificate automatically, we can check <code>weekly</code></p> <p><pre><code>/root/.acme.sh/acme.sh --cron\n</code></pre> Congratulation, you have successfully deployed Let\u2019s encrypt Certificate on your TrueNAS.</p>"},{"location":"Linux/Install-Uninstall%20openJDK%20in%20ubuntu/","title":"Java Installation","text":""},{"location":"Linux/Install-Uninstall%20openJDK%20in%20ubuntu/#install-jdk","title":"Install JDK","text":"<pre><code>sudo apt install openjdk-8-jdk\n</code></pre>"},{"location":"Linux/Install-Uninstall%20openJDK%20in%20ubuntu/#find-jdk-path","title":"Find JDK path","text":"<pre><code>update-alternatives --list java\n</code></pre>"},{"location":"Linux/Install-Uninstall%20openJDK%20in%20ubuntu/#to-uninstall-openjdk","title":"To uninstall OpenJDK","text":"<p>(if installed). First, check which OpenJDK packages are installed</p> <pre><code>sudo dpkg --list | grep -i jdk\n</code></pre>"},{"location":"Linux/Install-Uninstall%20openJDK%20in%20ubuntu/#to-remove-openjdk","title":"To remove OpenJDK","text":"<pre><code>sudo apt-get purge openjdk*\n</code></pre>"},{"location":"Linux/Install-Uninstall%20openJDK%20in%20ubuntu/#uninstall-openjdk-related-packages","title":"Uninstall OpenJDK-related packages","text":"<pre><code>sudo apt-get purge icedtea-* openjdk-*\n</code></pre>"},{"location":"Linux/Install-Uninstall%20openJDK%20in%20ubuntu/#check-that-all-openjdk-packages-have-been-removed","title":"Check that all OpenJDK packages have been removed","text":"<pre><code>sudo dpkg --list | grep -i jdk\n</code></pre>"},{"location":"Linux/Install-Uninstall%20openJDK%20in%20ubuntu/#switch-between-java-versions","title":"Switch between Java versions","text":"<p>enter the number</p> <pre><code>sudo update-alternatives --config java\n</code></pre>"},{"location":"Linux/test/","title":"this is test","text":"<p>hi this is test line 2</p>"}]}